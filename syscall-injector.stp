%{
#include <asm-generic/errno-base.h>
%}

function get_errno:long () %{
	STAP_RETVALUE = -EPERM;
%}

global pids
global blocked_files
global syscall
global counts

probe procfs("blocked_files").read {
	foreach (file in blocked_files) {
		$value .= sprintf ("%s\n", file)
	}
}

probe procfs("blocked_files").write {
	blocked_files [$value] = 1
}

probe procfs("count").read {
	$value = sprintf ("%d\n", counts [syscall])
}

probe procfs("count").write {
	counts [syscall] = strtol ($value, 10)
}
probe procfs("syscall").read {
	$value = syscall
}

probe procfs("syscall").write {
	syscall = $value
}

probe procfs("pids").read {
	foreach (pid in pids) {
		$value = sprintf ("%d\n", pid)
	}
}

probe procfs("pids").write {
	pid = strtol ($value, 10)
	delete pids
	delete blocked_files
	delete syscall
	delete counts

	pids [pid] = 1
}

probe kprocess.create {
	if ( pid() in pids ) {
		pids [new_pid] = 1
	}
}

probe kprocess.release {
	delete pids [released_pid]
}

function do_work:long (name, path) {

	if ( !(pid() in pids) ) {
		return 0
	}

	if ( name != syscall ) {
		return 0
	}

	tpath = user_string (path)
	if ( tpath in blocked_files ) {
		if (counts[name] != 0) {
			counts[name] --
			return 0
		}
		return get_errno ()
	}
}

probe syscall.open.return {
	ret = do_work (name, $filename)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.unlink.return {
	ret = do_work (name, $pathname)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.creat.return {
	ret = do_work (name, $pathname)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.access.return {
	ret = do_work (name, $filename)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.stat.return {
	ret = do_work (name, $filename)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.lstat.return {
	ret = do_work (name, $filename)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.statfs.return {
	ret = do_work (name, $pathname)
	if ( ret == 0 ) { next }
	$return = ret
}

probe syscall.unlink.return {
	ret = do_work (name, $pathname)
	if ( ret == 0 ) { next }
	$return = ret
}
