global ppids

function escape (s) {
	cs = str_replace (s, "'", "\\'")
	return str_replace (cs, ",", "\\,")
}

probe procfs("pids").read {
	foreach (pid in ppids) {
		$value .= sprintf ("%d\n", pid)
	}
}

probe procfs("pids").write {
	delete ppids;
	pid = strtol ($value, 10);
	ppids [pid] = 1
}

probe kprocess.create {
	if ( pid () in ppids ) {
		ppids [new_pid] = 1;
	}
}

probe kprocess.release {
	delete ppids [released_pid]
	exit ()
	next

	foreach (pid in ppids) {
		next
	}
	# if array is empty then exit
}

probe syscall.open.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($filename)), $return)
	}
}

probe syscall.creat.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($pathname)), $return)
	}
}

probe syscall.access.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($filename)), $return)
	}
}

probe syscall.stat.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($filename)), $return)
	}
}

probe syscall.lstat.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($filename)), $return)
	}
}

probe syscall.statfs.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($pathname)), $return)
	}
}

probe syscall.unlink.return {
	if ( ppids [pid ()] ) {
		printf ("'PROBE','%s','%s','%ld'\n", name, escape (user_string ($pathname)), $return)
	}
}
